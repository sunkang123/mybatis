<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意： 使用mapper代理方法开发，namespace有着特殊的作用，namespace等于mapper接口的地址
-->
<mapper namespace="com.mybatis.project.mapper.UserMapper">

    <!--开启本mapper的namespace下的二级缓存  pojo 实现序列化-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache" >
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        <!-- 同ehcache参数maxElementsInMemory -->
        <property name="maxEntriesLocalHeap" value="1000"/>
        <!-- 同ehcache参数maxElementsOnDisk -->
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>
    <!--定义SQL片段 id：sql片段的唯一标识
     经验： 是基于单表定义sql片段，这样的sql片段的可重用性才高
    在sql片段中，不要包括where
     -->
    <sql id="query_user_where">
            <if test="userCustom != null">
                <if test="userCustom.sex!=null and userCustom.sex!=''">
                  and    user.sex = ${userCustom.sex}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    and  user.username like '%${userCustom.name}%'
                </if>
                <if test="ids!= null">
                    <!--使用foreach 遍历传入的ids
                        collection :指定输入对象的集合属性
                        item:每个遍历生成对象  open ：开始遍历的拼接的串  separator:分割符 close :遍历关闭的
                        And (id =1 or id =2 or id =3)
                    -->
                    <foreach collection="ids" item="user_id" open="and (" separator="or" close=")">
                        <!--每次遍历的数据-->
                        id = #{user_id}
                    </foreach>

                    <!--另外一种实现 And id in (1,2,3)-->
                  <!--  <foreach collection="ids" item="user_id" open="And id in ( separator="," close=")">
                             #{user_id}
                    </foreach>-->
                </if>

            </if>
    </sql>
<!---->

        <!--用户信息综合查询-->
    <!--#{userCustom.sex} 取出包装对象的性别   前面配置了别名所以这里的类型用userQueryVo代替了 com.mybatis.project.po.UserQueryVo-->
    <select id="findUserList" parameterType="userQueryVo" resultType="userCustom">
        select * from user
        <!--where 可以自动去掉第一个and-->
        <where>
            <!--引用SQL 片段的id，如果refid不在本mapper文件中，前面需要增加namespace-->
           <include refid="query_user_where"></include>
            <!--这后面可能引用其他的sql片段*-->
        </where>
    </select>

    <!--用户信息综合总数-->
    <select id="findUserCount" parameterType="userQueryVo" resultType="int">
        select count(*)  from user
        <!--where 可以自动去掉第一个and-->
        <where>
            <!--引用SQL 片段的id，如果refid不在本mapper文件中，前面需要增加namespace-->
            <include refid="query_user_where"></include>
            <!--这后面可能引用其他的sql片段*-->
        </where>
    </select>

        <!--
        查询用户，返回结果只有一条
            #{id}:其中id 是被接收输入的参数，参数名称为id，
            resultType :指定为sql输出结果所映射的java对象类型
        -->
    <select id="findUserById" parameterType="int" resultType="user"  >
        select  * from USER WHERE  id=#{id}
    </select>

    <!--使用resultMap 进行输出映射  resultMap指定resultMap的id,如果在其他的mapper文件中，需要加上namespace-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap" >
        select  id id_ ,username username_ from USER WHERE  id=#{id}
    </select>

   <!--定义resultMap的输出映射
    id： result的唯一标识
   -->
    <resultMap id="userResultMap" type="user">
        <!-- id表示查询结果中的唯一标识  column表示查询出来的列名，property表示pojo中的属性名 -->
        <id property="id"  column="id_"></id>
        <!--result是对普通类的映射定义-->
        <result  property="username" column="username_"/>
    </resultMap>

    <!--
    查询用户，返回结果有多条
    ${} :表示拼接sql字符串,将接收到的内容不加任何修饰拼接到sql中，${} 可能会引起sqL注入
    ${}中只能用value,${value}来接收输入参数
    -->
    <select id="findUserByName" parameterType="string" resultType="com.mybatis.project.po.User"  >
        select * from user  where username like '%${value}%'
    </select>

    <!--添加用户
        parameterType：指定输入参数是pojo (包括用户信息)
        #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过ognl获取对象的对象的属性值
    -->
    <insert id="insertUser" parameterType="com.mybatis.project.po.User">
        insert into user(username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address,typeHandler=com.mybatis.project.typeHandlers.ExampleTypeHandler})
    </insert>

    <!--删除用户
    根据用户id删除用户
    -->

    <delete id="deleteUser" parameterType="int">
        delete  from user where id =#{id}
    </delete>

    <!--更新用户
    根据用户id来更新，注意，id必须存在
    -->
    <update id="updateUser" parameterType="com.mybatis.project.po.User">
        update user set username =#{username} ,birthday=#{birthday},sex=#{sex},address=#{address} where id =#{id}
    </update>


    
</mapper>