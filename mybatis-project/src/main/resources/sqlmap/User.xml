<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test">

        <!--
        查询用户，返回结果只有一条
            #{id}:其中id 是被接收输入的参数，参数名称为id，
            resultType :指定为sql输出结果所映射的java对象类型
        -->
    <select id="findUserById" parameterType="int" resultType="com.mybatis.project.po.User" >
        select  * from USER WHERE  id=#{id}
    </select>

    <!--
    查询用户，返回结果有多条
    ${} :表示拼接sql字符串,将接收到的内容不加任何修饰拼接到sql中，${} 可能会引起sqL注入
    ${}中只能用value,${value}来接收输入参数
    -->
    <select id="findUserByName" parameterType="string" resultType="com.mybatis.project.po.User"  >
        select * from user  where username like '%${value}%'
    </select>

    <!--添加用户
        parameterType：指定输入参数是pojo (包括用户信息)
        #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过ognl获取对象的对象的属性值
    -->
    <insert id="insertUser" parameterType="com.mybatis.project.po.User">
        insert into user(username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--删除用户
    根据用户id删除用户
    -->

    <delete id="deleteUser" parameterType="int">
        delete  from user where id =#{id}
    </delete>

    <!--更新用户
    根据用户id来更新，注意，id必须存在
    -->
    <update id="updateUser" parameterType="com.mybatis.project.po.User">
        update user set username =#{username} ,birthday=#{birthday},sex=#{sex},address=#{address} where id =#{id}
    </update>


    
</mapper>